%%   pset  be110 7

%% Question 1a: Plot the time-domain solutions for different parameters given in the frequency domain

% define parameters ; these values were adjusted for every  plot
K0 = 1;    % k0 = 1
K1 = 1;    % k1 = 0
z_list = [0.1, 0.3, 0.6, 0.9];  % list of damping ratios  (4)
w0_list = [1, 10, 100];  % list of natural frequencies  (3)
t = linspace(0, 10, 1000);  % time vector from 0 to 10 seconds
% set up 3x4 plot figure  
figure;
% loop over natural frequencies and damping ratios to generate subplots
for i = 1:length(w0_list)
    for j = 1:length(z_list)
        % extract current values of zeta and w0
        zeta = z_list(j);
        w0 = w0_list(i);
        
        % calculate the components of the equation
        sin_term = sin(w0 * t * sqrt(1 - zeta^2));
        cos_term = cos(w0 * t * sqrt(1 - zeta^2));
        exp_term = exp(-zeta * w0 * t);
        
        % define h(t)
        H = (K0 - zeta * w0 * K1) / (w0 * sqrt(1 - zeta^2)) * exp_term .* sin_term - (K1 / 2) * exp_term .* cos_term;
        
        % Corrected subplot indexing for a 3x4 grid (organized by zeta down columns)
        subplot(3, 4, (i - 1) * 4 + j);  % Correct indexing
        plot(t, H);
        title(['\zeta = ', num2str(zeta), ', \omega_0 = ', num2str(w0)]);
        xlabel('Time (s)');
        ylabel('h(t)');
        grid on; %  this code is needed to prevent overlap that may result due to the way subplot() works
     end
end
% Adjust layout to prevent overlap
sgtitle('Step Response for Various Damping Ratios and Natural Frequencies');

%%  Question 1b: Make a condensed 3 x 3 array of plots where the three values are in different rows as above, the three combinations are shown in different columns, and the 4 different values are plotted on the same axis in different colors. 

% create a 3x3 array of plots
figure;
% Define different K0 and K1 combinations for each column
K0_values = [1 0 1];
K1_values = [0 1 1];

for col = 1:3  % For each column (different K0, K1 combination)
    K0 = K0_values(col);
    K1 = K1_values(col);
    
    for row = 1:3  % For each row (different w0)
        w0 = w0_list(row);
        
        % Create subplot
        subplot(3, 3, (row-1)*3 + col);
        hold on;

        % Plot for each zeta value
        for k = 1:length(z_list)
            zeta = z_list(k);
            
            % Calculate damped frequency
            wd = w0 * sqrt(1 - zeta^2);
            
            % Calculate response
            H = (K0 - zeta*w0*K1)/(w0*sqrt(1-zeta^2)) * exp(-zeta*w0*t) .* sin(wd*t) ...
                - K1/2 * exp(-zeta*w0*t) .* (cos(wd*t));
            
            plot(t, H, 'LineWidth', 1);
        end
        
        % Add labels and title
        xlabel('Time (s)');
        ylabel('h(t)');
        title(sprintf('\\omega_0 = %d, K0 = %d, K1 = %d', w0, K0, K1));
        grid on;
        
        % Add legend for zeta values
        if row == 1 && col == 1  % Only add legend to first plot
            legendStrings = arrayfun(@(x) sprintf('\\zeta = %.1f', x), z_list, 'UniformOutput', false);
            legend(legendStrings, 'Location', 'best');
        end
        
        % Adjust y-axis limits based on row
        if row == 1
            ylim([-1 1]);
        elseif row == 2
            ylim([-0.5 0.5]);
        else
            ylim([-0.5 0.5]);
        end
    end
end

% Adjust spacing between subplots
set(gcf, 'Units', 'Normalized', 'OuterPosition', [0 0 1 1]);
sgtitle('Step Response for Various Parameters');

%% Question 2b: Make a plot of w_max (frequency where local maximum for a transfer funtion occurs) vs the damping ratio
 
% set zeta values
zeta = 0.1:0.1:0.7;
% set w0 to some constant value
w0 = 1;
% set wmax
wmax = w0 * sqrt(1 - 2*(zeta.^2));
% Plot
figure
plot(zeta,wmax)
xlabel('zeta')
ylabel('wmax')
title('wmax vs zeta')

%% Question 2c: Make a plot of the local maximum / passband gain versus vs the damping ratio for (= 0.1, 0.2, 0.3,...0.7)

% set zeta values
zeta = 0.1:0.1:0.7;
% set Hratio
Hratio = 1 ./ (2 * zeta .* sqrt(1 - zeta.^2));
% plot
figure
plot(zeta,Hratio)
xlabel('zeta')
ylabel('Hratio')
title('Hratio vs zeta graph')

%% Question 2d:  For K=100m/N and w0 =10rad/sec, use MATLAB to plot the step response of the system for several different damping ratios  = {0.1, 0.2, ... , 0.9, 1.0, 2.0}.  , 0.2, 0.3,...0.7)

figure; t = [-.5:.01:2]; c_list = [0.1:0.1:1,2]'; K=100; w0=10;
for k=1:length(c_list),
    c = c_list(k);
    Numerator = {[K]}; 
    Denominator = {[1, 2*c*w0, w0^2]}; % Put in the polynomial coeffs for the num & denom
    H = tf(Numerator,Denominator); % Make a transfer function H
    [y,t1] = step(H,t); % Let MATLAB compute the step response
    plot(t1,y); xlabel('Time'); ylabel('Step Response'); hold on; % Plot the step response y(t)
end
plot(t,t>0,'--','color',0.8*[1 1 1],'linewidth',2); hold on; % Plot the step input x(t) for reference
legend(num2str(c_list));

%% Question 2e:  Determine & plot the rise time and % overshoot (PO) for the responses in part (c) 

% parameters given to us
K = 100;   % gain (m/N)
w0 = 10;   % natural frequency (w0 = 10 rad/sec)

% time vector
t = -0.5:0.01:2;   % time from -0.5 to 2 seconds with step size of 0.01

% damping ratio values (zeta)
c_list = [0.1:0.1:1, 2];   % Damping ratios from 0.1 to 2 (increments of 0.1)

% Initialize arrays for Rise Time and Percent Overshoot
RT = zeros(length(c_list), 1); % Rise time array
PO = zeros(length(c_list), 1); % Percent overshoot array

% Create figure for plotting rise time and overshoot
figure;

% Loop through each damping ratio
for k = 1:length(c_list)
    c = c_list(k);  % Get the current damping ratio (zeta)
    
    % Define the transfer function: Numerator is just K, Denominator is standard form
    Numerator = K;                  % Numerator: constant K
    Denominator = [1, 2*c*w0, w0^2]; % Denominator: s^2 + 2*zeta*w0*s + w0^2
    
    % Create transfer function H(s) using tf function
    H = tf(Numerator, Denominator); 
    
    % Compute step response of the system
    [y, t1] = step(H, t);   % y = step response, t1 = time vector
    
    % Determine the final value of the step response (asymptote)
    final_value = K / w0^2;  % For a second-order system, final value
    
    % Find times at 10% and 90% of the final value
    y_10 = 0.1 * final_value; % 10% of the final value
    y_90 = 0.9 * final_value; % 90% of the final value
    
    % Get indices where the response reaches 10% and 90%
    idx_10 = find(y >= y_10, 1);
    idx_90 = find(y >= y_90, 1);
    
    % Calculate Rise Time (RT) as time between 10% and 90% values
    RT(k) = t1(idx_90) - t1(idx_10);
    
    % Calculate Percent Overshoot (PO) from the peak value
    peak_value = max(y);  % Find peak value of the response
    PO(k) = ((peak_value - final_value) / final_value) * 100; % Overshoot formula
end

% Plot Rise Time vs Damping Ratio
subplot(1,2,1);
plot(c_list, RT, '-o', 'LineWidth', 2);
xlabel('Damping Ratio (\zeta)');
ylabel('Rise Time (sec)');
title('Rise Time vs Damping Ratio');
grid on;

% Plot Percent Overshoot vs Damping Ratio
subplot(1,2,2);
plot(c_list, PO, '-o', 'LineWidth', 2);
xlabel('Damping Ratio (\zeta)');
ylabel('Overshoot (%)');
title('Percent Overshoot vs Damping Ratio');
grid on;


%% Question 3f: Plot step response for various damping ratios

figure; 
t = 0:0.01:15;  % Time range adjusted to focus on main response
c_list = [0:0.25:2]'; % Damping ratios from 0 to 2 with step size 0.25
K = 1; 
w0 = 1;  % Natural frequency (w0 = 1 rad/sec)

for k = 1:length(c_list)
    c = c_list(k);  % Get the current damping ratio (zeta)
    
    % Transfer function numerator and denominator
    Numerator = [K];               % Numerator is just K (constant)
    Denominator = [1, 2*c*w0, w0^2]; % Denominator: s^2 + 2*zeta*w0*s + w0^2
    
    % Create the transfer function H(s)
    H = tf(Numerator, Denominator); 
    
    % Compute step response
    [y, t1] = step(H, t);   % y = step response, t1 = time vector
    
    % Plot the step response with damping ratio in the legend
    plot(t1, y, 'DisplayName', ['\zeta = ', num2str(c)]); 
    hold on;  % Keep previous plots on the same figure
end

% Plot the step input (for reference)
plot(t, t > 0, '--', 'Color', 0.8 * [1 1 1], 'LineWidth', 2); 
xlabel('Time (sec)');
ylabel('Step Response');
title('Step Response for Various Damping Ratios (\zeta)');
legend('show');  % Display legend showing different damping ratios
grid on;  % Show grid for clarity


%% Question 3g: Plot step response for other damping ratios

figure; 
t = 0:0.01:10;  % Time range adjusted to focus on main response
c_list = [0:0.25:2]'; % Damping ratios from 0 to 2 with step size 0.25
K = 1; 
w0 = 3;  % Higher natural frequency (w0 = 3 rad/sec)

for k = 1:length(c_list)
    c = c_list(k);  % Get the current damping ratio (zeta)
    
    % Transfer function numerator and denominator
    Numerator = [K];               % Numerator is just K (constant)
    Denominator = [1, 2*c*w0, w0^2]; % Denominator: s^2 + 2*zeta*w0*s + w0^2
    
    % Create the transfer function H(s)
    H = tf(Numerator, Denominator); 
    
    % Compute step response
    [y, t1] = step(H, t);   % y = step response, t1 = time vector
    
    % Plot the step response with damping ratio in the legend
    plot(t1, y, 'DisplayName', ['\zeta = ', num2str(c)]); 
    hold on;  % Keep previous plots on the same figure
end

% Plot the step input (for reference)
plot(t, t > 0, '--', 'Color', 0.8 * [1 1 1], 'LineWidth', 2); 
xlabel('Time (sec)');
ylabel('Step Response');
title('Step Response for Various Damping Ratios (\zeta)');
legend('show');  % Display legend showing different damping ratios
grid on;  % Show grid for clarity
